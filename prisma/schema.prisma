generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DATABASE_URL")
}

model Client {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique // For URL routing
  logo        String?   // URL to client logo
  lat         Float     @default(0.0)
  lng         Float     @default(0.0)
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDefault     Boolean   @default(false) // Default client for new projects

  @@index([slug])
}

model Project {
  id          String          @id @default(uuid())
  name        String
  lat         Float
  lng         Float
  description String?
  hideMarker  Boolean         @default(false)
  isVisible   Boolean         @default(true) // Visibility flag
  zoom        Int             @default(12)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  details     ProjectDetails?
  polygon     ProjectPolygon?
  client      Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String

  @@index([lat, lng])
  @@index([clientId])
}

model ProjectDetails {
  id        String   @id @default(uuid())
  location  String?
  image     String?
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectPolygon {
  id             String        @id @default(uuid())
  name           String
  description    String?
  type           String
  coordinates    String
  popupDetails   PopupDetails? @relation(fields: [popupDetailsId], references: [id], onDelete: Cascade)
  popupDetailsId String?
  minZoom        Int?
  maxZoom        Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  projectId      String?       @unique
  project        Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  style          PolygonStyle?

  @@index([projectId])
}

model PopupDetails {
  id             String           @id @default(uuid())
  title          String?
  image          String?
  description    String?
  link           String?
  imagesLink     String?
  videoLink      String?
  ariealLink     String?
  type           String @default("details")
  ProjectPolygon ProjectPolygon[]
}

model PolygonStyle {
  id               String         @id @default(uuid())
  fillColor        String?
  hoverFillColor   String?
  fillOpacity      Float?
  hoverFillOpacity Float?
  lineColor        String?
  lineWidth        Int?           @default(1)
  lineOpacity      Float?         @default(1)
  lineDashArray    Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  polygonId        String         @unique
  polygon          ProjectPolygon @relation(fields: [polygonId], references: [id], onDelete: Cascade)
}

model POI {
  id          String    @id @default(uuid())
  title       String
  lat         Float
  lng         Float
  type        POIType   @relation(fields: [typeId], references: [id])
  typeId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([lat, lng])
  @@index([typeId])
}

model POIType {
  id          String    @id @default(uuid())
  name        String    @unique
  icon        String    // Icon identifier
  color       String    // Marker color
  pois        POI[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}